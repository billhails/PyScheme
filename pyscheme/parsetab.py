
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "COMMENT ELSE FN ID IF NUMBERexpression : symbolsymbol : IDexpression : numbernumber : NUMBERexpression : IF '(' expression ')' '{' expression '}' ELSE '{' expression '}'expression : FN '(' fargs ')' '{' expression '}'expression : expression '(' aargs ')'expression : expression '+' expressionexpression : '(' expression ')'fargs : fargs : nfargsnfargs : symbolnfargs : nfargs ',' symbolaargs : aargs : naargsnaargs : expressionnaargs : naargs ',' expression"
    
_lr_action_items = {'IF':([0,5,9,10,11,24,29,30,37,],[4,4,4,4,4,4,4,4,4,]),'FN':([0,5,9,10,11,24,29,30,37,],[6,6,6,6,6,6,6,6,6,]),'(':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,23,24,28,29,30,32,33,35,37,38,39,],[5,9,-1,-3,11,5,13,-2,-4,5,5,5,9,9,9,9,-9,-7,5,9,5,5,9,9,-6,5,9,-5,]),'ID':([0,5,9,10,11,13,24,27,29,30,37,],[7,7,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,5,9,10,11,24,29,30,37,],[8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,7,8,17,19,23,35,39,],[0,-1,-3,-2,-4,-8,-9,-7,-6,-5,]),'+':([1,2,3,7,8,12,14,17,18,19,23,28,32,33,35,38,39,],[10,-1,-3,-2,-4,10,10,10,10,-9,-7,10,10,10,-6,10,-5,]),')':([2,3,7,8,9,12,13,14,15,16,17,18,19,20,21,22,23,28,31,35,39,],[-1,-3,-2,-4,-14,19,-10,-16,23,-15,-8,25,-9,26,-11,-12,-7,-17,-13,-6,-5,]),',':([2,3,7,8,14,16,17,19,21,22,23,28,31,35,39,],[-1,-3,-2,-4,-16,24,-8,-9,27,-12,-7,-17,-13,-6,-5,]),'}':([2,3,7,8,17,19,23,32,33,35,38,39,],[-1,-3,-2,-4,-8,-9,-7,34,35,-6,39,-5,]),'{':([25,26,36,],[29,30,37,]),'ELSE':([34,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,9,10,11,24,29,30,37,],[1,12,14,17,18,28,32,33,38,]),'symbol':([0,5,9,10,11,13,24,27,29,30,37,],[2,2,2,2,2,22,2,31,2,2,2,]),'number':([0,5,9,10,11,24,29,30,37,],[3,3,3,3,3,3,3,3,3,]),'aargs':([9,],[15,]),'naargs':([9,],[16,]),'fargs':([13,],[20,]),'nfargs':([13,],[21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> symbol','expression',1,'p_expression_id','yacc.py',7),
  ('symbol -> ID','symbol',1,'p_symbol','yacc.py',12),
  ('expression -> number','expression',1,'p_expression_number','yacc.py',17),
  ('number -> NUMBER','number',1,'p_number','yacc.py',22),
  ('expression -> IF ( expression ) { expression } ELSE { expression }','expression',11,'p_expression_conditional','yacc.py',27),
  ('expression -> FN ( fargs ) { expression }','expression',7,'p_expression_lambda','yacc.py',32),
  ('expression -> expression ( aargs )','expression',4,'p_expression_application','yacc.py',37),
  ('expression -> expression + expression','expression',3,'p_expression_addition','yacc.py',42),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','yacc.py',47),
  ('fargs -> <empty>','fargs',0,'p_fargs_empty','yacc.py',52),
  ('fargs -> nfargs','fargs',1,'p_fargs_nonempty','yacc.py',57),
  ('nfargs -> symbol','nfargs',1,'p_nfargs_symbol','yacc.py',62),
  ('nfargs -> nfargs , symbol','nfargs',3,'p_nfargs_comma','yacc.py',67),
  ('aargs -> <empty>','aargs',0,'p_aargs_empty','yacc.py',72),
  ('aargs -> naargs','aargs',1,'p_aargs_nonempty','yacc.py',77),
  ('naargs -> expression','naargs',1,'p_naargs_expr','yacc.py',82),
  ('naargs -> naargs , expression','naargs',3,'p_naargs_comma','yacc.py',87),
]
